#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blogo.NET.Data.Mapping
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Blogo")]
	public partial class BlogoMapDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertauthor(author instance);
    partial void Updateauthor(author instance);
    partial void Deleteauthor(author instance);
    partial void Insertblog_tag(blog_tag instance);
    partial void Updateblog_tag(blog_tag instance);
    partial void Deleteblog_tag(blog_tag instance);
    partial void Insertblogentry(blogentry instance);
    partial void Updateblogentry(blogentry instance);
    partial void Deleteblogentry(blogentry instance);
    partial void Insertcomment(comment instance);
    partial void Updatecomment(comment instance);
    partial void Deletecomment(comment instance);
    partial void Inserttag(tag instance);
    partial void Updatetag(tag instance);
    partial void Deletetag(tag instance);
    partial void Insertlog(log instance);
    partial void Updatelog(log instance);
    partial void Deletelog(log instance);
    partial void Insertfile(file instance);
    partial void Updatefile(file instance);
    partial void Deletefile(file instance);
    #endregion
		
		public BlogoMapDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BlogoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BlogoMapDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogoMapDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogoMapDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogoMapDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<author> authors
		{
			get
			{
				return this.GetTable<author>();
			}
		}
		
		public System.Data.Linq.Table<blog_tag> blog_tags
		{
			get
			{
				return this.GetTable<blog_tag>();
			}
		}
		
		public System.Data.Linq.Table<blogentry> blogentries
		{
			get
			{
				return this.GetTable<blogentry>();
			}
		}
		
		public System.Data.Linq.Table<comment> comments
		{
			get
			{
				return this.GetTable<comment>();
			}
		}
		
		public System.Data.Linq.Table<tag> tags
		{
			get
			{
				return this.GetTable<tag>();
			}
		}
		
		public System.Data.Linq.Table<log> logs
		{
			get
			{
				return this.GetTable<log>();
			}
		}
		
		public System.Data.Linq.Table<file> files
		{
			get
			{
				return this.GetTable<file>();
			}
		}
	}
	
	[Table(Name="dbo.authors")]
	public partial class author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _username;
		
		private string _password;
		
		private string _salt;
		
		private EntitySet<blogentry> _blogentries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnsaltChanging(string value);
    partial void OnsaltChanged();
    #endregion
		
		public author()
		{
			this._blogentries = new EntitySet<blogentry>(new Action<blogentry>(this.attach_blogentries), new Action<blogentry>(this.detach_blogentries));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_salt", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string salt
		{
			get
			{
				return this._salt;
			}
			set
			{
				if ((this._salt != value))
				{
					this.OnsaltChanging(value);
					this.SendPropertyChanging();
					this._salt = value;
					this.SendPropertyChanged("salt");
					this.OnsaltChanged();
				}
			}
		}
		
		[Association(Name="author_blogentry", Storage="_blogentries", OtherKey="author_id")]
		public EntitySet<blogentry> blogentries
		{
			get
			{
				return this._blogentries;
			}
			set
			{
				this._blogentries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blogentries(blogentry entity)
		{
			this.SendPropertyChanging();
			entity.author = this;
		}
		
		private void detach_blogentries(blogentry entity)
		{
			this.SendPropertyChanging();
			entity.author = null;
		}
	}
	
	[Table(Name="dbo.blog_tags")]
	public partial class blog_tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _tag_id;
		
		private long _blog_id;
		
		private EntityRef<blogentry> _blogentry;
		
		private EntityRef<tag> _tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Ontag_idChanging(long value);
    partial void Ontag_idChanged();
    partial void Onblog_idChanging(long value);
    partial void Onblog_idChanged();
    #endregion
		
		public blog_tag()
		{
			this._blogentry = default(EntityRef<blogentry>);
			this._tag = default(EntityRef<tag>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_tag_id", DbType="Int NOT NULL")]
		public long tag_id
		{
			get
			{
				return this._tag_id;
			}
			set
			{
				if ((this._tag_id != value))
				{
					if (this._tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontag_idChanging(value);
					this.SendPropertyChanging();
					this._tag_id = value;
					this.SendPropertyChanged("tag_id");
					this.Ontag_idChanged();
				}
			}
		}
		
		[Column(Storage="_blog_id", DbType="Int NOT NULL")]
		public long blog_id
		{
			get
			{
				return this._blog_id;
			}
			set
			{
				if ((this._blog_id != value))
				{
					if (this._blogentry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onblog_idChanging(value);
					this.SendPropertyChanging();
					this._blog_id = value;
					this.SendPropertyChanged("blog_id");
					this.Onblog_idChanged();
				}
			}
		}
		
		[Association(Name="blogentry_blog_tag", Storage="_blogentry", ThisKey="blog_id", IsForeignKey=true)]
		public blogentry blogentry
		{
			get
			{
				return this._blogentry.Entity;
			}
			set
			{
				blogentry previousValue = this._blogentry.Entity;
				if (((previousValue != value) 
							|| (this._blogentry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blogentry.Entity = null;
						previousValue.blog_tags.Remove(this);
					}
					this._blogentry.Entity = value;
					if ((value != null))
					{
						value.blog_tags.Add(this);
						this._blog_id = value.id;
					}
					else
					{
						this._blog_id = default(long);
					}
					this.SendPropertyChanged("blogentry");
				}
			}
		}
		
		[Association(Name="tag_blog_tag", Storage="_tag", ThisKey="tag_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tag tag
		{
			get
			{
				return this._tag.Entity;
			}
			set
			{
				tag previousValue = this._tag.Entity;
				if (((previousValue != value) 
							|| (this._tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tag.Entity = null;
						previousValue.blog_tags.Remove(this);
					}
					this._tag.Entity = value;
					if ((value != null))
					{
						value.blog_tags.Add(this);
						this._tag_id = value.id;
					}
					else
					{
						this._tag_id = default(long);
					}
					this.SendPropertyChanged("tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.blogentries")]
	public partial class blogentry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _author_id;
		
		private string _title;
		
		private string _description;
		
		private string _type;
		
		private bool _allowcomments;
		
		private bool _markprivate;
		
		private string _body;
		
		private System.DateTime _datecreated;
		
		private System.DateTime _datepublished;
		
		private System.DateTime _datemodified;
		
		private EntitySet<blog_tag> _blog_tags;
		
		private EntitySet<comment> _comments;
		
		private EntityRef<author> _author;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onauthor_idChanging(System.Nullable<long> value);
    partial void Onauthor_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnallowcommentsChanging(bool value);
    partial void OnallowcommentsChanged();
    partial void OnmarkprivateChanging(bool value);
    partial void OnmarkprivateChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OndatecreatedChanging(System.DateTime value);
    partial void OndatecreatedChanged();
    partial void OndatepublishedChanging(System.DateTime value);
    partial void OndatepublishedChanged();
    partial void OndatemodifiedChanging(System.DateTime value);
    partial void OndatemodifiedChanged();
    #endregion
		
		public blogentry()
		{
			this._blog_tags = new EntitySet<blog_tag>(new Action<blog_tag>(this.attach_blog_tags), new Action<blog_tag>(this.detach_blog_tags));
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			this._author = default(EntityRef<author>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_author_id", DbType="Int")]
		public System.Nullable<long> author_id
		{
			get
			{
				return this._author_id;
			}
			set
			{
				if ((this._author_id != value))
				{
					if (this._author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onauthor_idChanging(value);
					this.SendPropertyChanging();
					this._author_id = value;
					this.SendPropertyChanged("author_id");
					this.Onauthor_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_allowcomments", DbType="Bit NOT NULL")]
		public bool allowcomments
		{
			get
			{
				return this._allowcomments;
			}
			set
			{
				if ((this._allowcomments != value))
				{
					this.OnallowcommentsChanging(value);
					this.SendPropertyChanging();
					this._allowcomments = value;
					this.SendPropertyChanged("allowcomments");
					this.OnallowcommentsChanged();
				}
			}
		}
		
		[Column(Storage="_markprivate", DbType="Bit NOT NULL")]
		public bool markprivate
		{
			get
			{
				return this._markprivate;
			}
			set
			{
				if ((this._markprivate != value))
				{
					this.OnmarkprivateChanging(value);
					this.SendPropertyChanging();
					this._markprivate = value;
					this.SendPropertyChanged("markprivate");
					this.OnmarkprivateChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_datecreated", DbType="DateTime NOT NULL")]
		public System.DateTime datecreated
		{
			get
			{
				return this._datecreated;
			}
			set
			{
				if ((this._datecreated != value))
				{
					this.OndatecreatedChanging(value);
					this.SendPropertyChanging();
					this._datecreated = value;
					this.SendPropertyChanged("datecreated");
					this.OndatecreatedChanged();
				}
			}
		}
		
		[Column(Storage="_datepublished", DbType="DateTime NOT NULL")]
		public System.DateTime datepublished
		{
			get
			{
				return this._datepublished;
			}
			set
			{
				if ((this._datepublished != value))
				{
					this.OndatepublishedChanging(value);
					this.SendPropertyChanging();
					this._datepublished = value;
					this.SendPropertyChanged("datepublished");
					this.OndatepublishedChanged();
				}
			}
		}
		
		[Column(Storage="_datemodified", DbType="DateTime NOT NULL")]
		public System.DateTime datemodified
		{
			get
			{
				return this._datemodified;
			}
			set
			{
				if ((this._datemodified != value))
				{
					this.OndatemodifiedChanging(value);
					this.SendPropertyChanging();
					this._datemodified = value;
					this.SendPropertyChanged("datemodified");
					this.OndatemodifiedChanged();
				}
			}
		}
		
		[Association(Name="blogentry_blog_tag", Storage="_blog_tags", OtherKey="blog_id")]
		public EntitySet<blog_tag> blog_tags
		{
			get
			{
				return this._blog_tags;
			}
			set
			{
				this._blog_tags.Assign(value);
			}
		}
		
		[Association(Name="blogentry_comment", Storage="_comments", OtherKey="blog_id")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[Association(Name="author_blogentry", Storage="_author", ThisKey="author_id", IsForeignKey=true, DeleteRule="SET NULL")]
		public author author
		{
			get
			{
				return this._author.Entity;
			}
			set
			{
				author previousValue = this._author.Entity;
				if (((previousValue != value) 
							|| (this._author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._author.Entity = null;
						previousValue.blogentries.Remove(this);
					}
					this._author.Entity = value;
					if ((value != null))
					{
						value.blogentries.Add(this);
						this._author_id = value.id;
					}
					else
					{
						this._author_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("author");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blog_tags(blog_tag entity)
		{
			this.SendPropertyChanging();
			entity.blogentry = this;
		}
		
		private void detach_blog_tags(blog_tag entity)
		{
			this.SendPropertyChanging();
			entity.blogentry = null;
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.blogentry = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.blogentry = null;
		}
	}
	
	[Table(Name="dbo.comments")]
	public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _author;
		
		private long _blog_id;
		
		private string _IP;
		
		private System.DateTime _datecreated;
		
		private System.DateTime _datemodified;
		
		private string _body;
		
		private EntityRef<blogentry> _blogentry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void Onblog_idChanging(long value);
    partial void Onblog_idChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OndatecreatedChanging(System.DateTime value);
    partial void OndatecreatedChanged();
    partial void OndatemodifiedChanging(System.DateTime value);
    partial void OndatemodifiedChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    #endregion
		
		public comment()
		{
			this._blogentry = default(EntityRef<blogentry>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_author", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[Column(Storage="_blog_id", DbType="Int NOT NULL")]
		public long blog_id
		{
			get
			{
				return this._blog_id;
			}
			set
			{
				if ((this._blog_id != value))
				{
					if (this._blogentry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onblog_idChanging(value);
					this.SendPropertyChanging();
					this._blog_id = value;
					this.SendPropertyChanged("blog_id");
					this.Onblog_idChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_datecreated", DbType="DateTime NOT NULL")]
		public System.DateTime datecreated
		{
			get
			{
				return this._datecreated;
			}
			set
			{
				if ((this._datecreated != value))
				{
					this.OndatecreatedChanging(value);
					this.SendPropertyChanging();
					this._datecreated = value;
					this.SendPropertyChanged("datecreated");
					this.OndatecreatedChanged();
				}
			}
		}
		
		[Column(Storage="_datemodified", DbType="DateTime NOT NULL")]
		public System.DateTime datemodified
		{
			get
			{
				return this._datemodified;
			}
			set
			{
				if ((this._datemodified != value))
				{
					this.OndatemodifiedChanging(value);
					this.SendPropertyChanging();
					this._datemodified = value;
					this.SendPropertyChanged("datemodified");
					this.OndatemodifiedChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Association(Name="blogentry_comment", Storage="_blogentry", ThisKey="blog_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public blogentry blogentry
		{
			get
			{
				return this._blogentry.Entity;
			}
			set
			{
				blogentry previousValue = this._blogentry.Entity;
				if (((previousValue != value) 
							|| (this._blogentry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._blogentry.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._blogentry.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._blog_id = value.id;
					}
					else
					{
						this._blog_id = default(long);
					}
					this.SendPropertyChanged("blogentry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tags")]
	public partial class tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _tagname;
		
		private EntitySet<blog_tag> _blog_tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntagnameChanging(string value);
    partial void OntagnameChanged();
    #endregion
		
		public tag()
		{
			this._blog_tags = new EntitySet<blog_tag>(new Action<blog_tag>(this.attach_blog_tags), new Action<blog_tag>(this.detach_blog_tags));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_tagname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string tagname
		{
			get
			{
				return this._tagname;
			}
			set
			{
				if ((this._tagname != value))
				{
					this.OntagnameChanging(value);
					this.SendPropertyChanging();
					this._tagname = value;
					this.SendPropertyChanged("tagname");
					this.OntagnameChanged();
				}
			}
		}
		
		[Association(Name="tag_blog_tag", Storage="_blog_tags", OtherKey="tag_id")]
		public EntitySet<blog_tag> blog_tags
		{
			get
			{
				return this._blog_tags;
			}
			set
			{
				this._blog_tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_blog_tags(blog_tag entity)
		{
			this.SendPropertyChanging();
			entity.tag = this;
		}
		
		private void detach_blog_tags(blog_tag entity)
		{
			this.SendPropertyChanging();
			entity.tag = null;
		}
	}
	
	[Table(Name="dbo.logs")]
	public partial class log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.DateTime _date;
		
		private string _event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OneventChanging(string value);
    partial void OneventChanged();
    #endregion
		
		public log()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Name="event", Storage="_event", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string @event
		{
			get
			{
				return this._event;
			}
			set
			{
				if ((this._event != value))
				{
					this.OneventChanging(value);
					this.SendPropertyChanging();
					this._event = value;
					this.SendPropertyChanged("@event");
					this.OneventChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.files")]
	public partial class file : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _filename;
		
		private string _mime;
		
		private System.Data.Linq.Binary _filecontent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OnmimeChanging(string value);
    partial void OnmimeChanged();
    partial void OnfilecontentChanging(System.Data.Linq.Binary value);
    partial void OnfilecontentChanged();
    #endregion
		
		public file()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_filename", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[Column(Storage="_mime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string mime
		{
			get
			{
				return this._mime;
			}
			set
			{
				if ((this._mime != value))
				{
					this.OnmimeChanging(value);
					this.SendPropertyChanging();
					this._mime = value;
					this.SendPropertyChanged("mime");
					this.OnmimeChanged();
				}
			}
		}
		
		[Column(Storage="_filecontent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary filecontent
		{
			get
			{
				return this._filecontent;
			}
			set
			{
				if ((this._filecontent != value))
				{
					this.OnfilecontentChanging(value);
					this.SendPropertyChanging();
					this._filecontent = value;
					this.SendPropertyChanged("filecontent");
					this.OnfilecontentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
